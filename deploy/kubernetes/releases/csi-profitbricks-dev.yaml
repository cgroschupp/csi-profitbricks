# Copyright 2018 DigitalOcean
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Configuration to deploy release version of the CSI DigitalOcean
# plugin (https://github.com/digitalocean/csi-digitalocean) compatible with
# Kubernetes >=v1.10.5
#
# example usage: kubectl create -f <this_file>

---

kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: pb-block-storage
  namespace: kube-system
  annotations:
    storageclass.kubernetes.io/is-default-class: "true"
provisioner: com.profitbricks.csi.pbbs

---

##############################################
###########                       ############
###########   Controller plugin   ############
###########                       ############
##############################################

kind: StatefulSet
apiVersion: apps/v1beta1
metadata:
  name: csi-pb-controller
  namespace: kube-system
spec:
  serviceName: "csi-pb"
  replicas: 1
  template:
    metadata:
      labels:
        app: csi-pb-controller
        role: csi-pb
    spec:
      serviceAccount: csi-pb-controller-sa
      containers:
        - name: csi-provisioner
          image: quay.io/k8scsi/csi-provisioner:v0.3.0
          args:
            - "--provisioner=com.profitbricks.csi.pbbs"
            - "--csi-address=$(ADDRESS)"
            - "--v=5"
          env:
            - name: ADDRESS
              value: /var/lib/csi/sockets/pluginproxy/csi.sock
          imagePullPolicy: "Always"
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
        - name: csi-attacher
          image: quay.io/k8scsi/csi-attacher:v0.3.0
          args:
            - "--v=5"
            - "--csi-address=$(ADDRESS)"
          env:
            - name: ADDRESS
              value: /var/lib/csi/sockets/pluginproxy/csi.sock
          imagePullPolicy: "Always"
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
        - name: csi-pb-plugin
          image: cgroschupp/pb-csi-plugin:dev
          args :
            - "--endpoint=$(CSI_ENDPOINT)"
            - "--username=$(PROFITBRICKS_USERNAME)"
            - "--password=$(PROFITBRICKS_PASSWORD)"
            - "--url=$(PROFITBRICKS_API_URL)"
            - "--datacenter=$(PROFITBRICKS_DC)"
          env:
            - name: CSI_ENDPOINT
              value: unix:///var/lib/csi/sockets/pluginproxy/csi.sock
            - name: PROFITBRICKS_API_URL
              value: https://nbc-api.nexinto.com/cloudapi/v4
            - name: PROFITBRICKS_DC
              valueFrom:
                secretKeyRef:
                  name: profitbricks
                  key: datacenter
            - name: PROFITBRICKS_USERNAME
              valueFrom:
                secretKeyRef:
                  name: profitbricks
                  key: username
            - name: PROFITBRICKS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: profitbricks
                  key: password
          imagePullPolicy: "Always"
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
      volumes:
        - name: socket-dir
          emptyDir: {}
---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: csi-pb-controller-sa
  namespace: kube-system

---

kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-pb-controller-provisioner-binding
  namespace: kube-system
subjects:
  - kind: ServiceAccount
    name: csi-pb-controller-sa
    namespace: kube-system
roleRef:
  kind: ClusterRole
  name: system:csi-external-provisioner
  apiGroup: rbac.authorization.k8s.io

---

kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-pb-controller-attacher-binding
  namespace: kube-system
subjects:
  - kind: ServiceAccount
    name: csi-pb-controller-sa
    namespace: kube-system
roleRef:
  kind: ClusterRole
  name: system:csi-external-attacher
  apiGroup: rbac.authorization.k8s.io

---


########################################
###########                 ############
###########   Node plugin   ############
###########                 ############
########################################

kind: DaemonSet
apiVersion: apps/v1beta2
metadata:
  name: csi-pb-node
  namespace: kube-system
spec:
  selector:
    matchLabels:
      app: csi-pb-node
  template:
    metadata:
      labels:
        app: csi-pb-node
        role: csi-pb
    spec:
      serviceAccount: csi-pb-node-sa
      hostNetwork: true
      containers:
        - name: driver-registrar
          image: quay.io/k8scsi/driver-registrar:v0.3.0
          args:
            - "--v=5"
            - "--csi-address=$(ADDRESS)"
          env:
            - name: ADDRESS
              value: /csi/csi.sock
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          volumeMounts:
            - name: plugin-dir
              mountPath: /csi/
              # TODO(arslan): the registrar is not implemented yet
              # - name: registrar-socket-dir
              #   mountPath: /var/lib/csi/sockets/
        - name: csi-pb-plugin
          image: cgroschupp/pb-csi-plugin:dev
          args :
            - "--endpoint=$(CSI_ENDPOINT)"
            - "--username=$(PROFITBRICKS_USERNAME)"
            - "--password=$(PROFITBRICKS_PASSWORD)"
            - "--url=$(PROFITBRICKS_API_URL)"
            - "--datacenter=$(PROFITBRICKS_DC)"
          env:
            - name: CSI_ENDPOINT
              value: unix:///csi/csi.sock
            - name: PROFITBRICKS_API_URL
              value: https://nbc-api.nexinto.com/cloudapi/v4
            - name: PROFITBRICKS_DC
              valueFrom:
                secretKeyRef:
                  name: profitbricks
                  key: datacenter
            - name: PROFITBRICKS_USERNAME
              valueFrom:
                secretKeyRef:
                  name: profitbricks
                  key: username
            - name: PROFITBRICKS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: profitbricks
                  key: password
          imagePullPolicy: "Always"
          securityContext:
            privileged: true
            capabilities:
              add: ["SYS_ADMIN"]
            allowPrivilegeEscalation: true
          volumeMounts:
            - name: plugin-dir
              mountPath: /csi
            - name: pods-mount-dir
              mountPath: /var/lib/kubelet
              # needed so that any mounts setup inside this container are
              # propagated back to the host machine.
              mountPropagation: "Bidirectional"
            - name: device-dir
              mountPath: /dev
      volumes:
        # TODO(arslan): the registar is not implemented yet
        #- name: registrar-socket-dir
        #  hostPath:
        #    path: /var/lib/kubelet/device-plugins/
        #    type: DirectoryOrCreate
        - name: plugin-dir
          hostPath:
            path: /var/lib/kubelet/plugins/com.profitbricks.csi.pbbs
            type: DirectoryOrCreate
        - name: pods-mount-dir
          hostPath:
            path: /var/lib/kubelet
            type: Directory
        - name: device-dir
          hostPath:
            path: /dev
---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: csi-pb-node-sa
  namespace: kube-system

---

kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-pb-driver-registrar-binding
  namespace: kube-system
subjects:
  - kind: ServiceAccount
    name: csi-pb-node-sa
    namespace: kube-system
roleRef:
  kind: ClusterRole
  name: csi-pb-driver-registrar-role
  apiGroup: rbac.authorization.k8s.io


---

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-pb-driver-registrar-role
  namespace: kube-system
rules:
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["get", "list", "update"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["list", "watch", "create", "update", "patch"]
